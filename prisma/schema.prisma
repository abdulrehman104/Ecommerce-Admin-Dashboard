generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  category   Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  kitchens   Kitchens[]  @relation("StoreToKitchens")
  cuisines   Cuisines[]  @relation("StoreToCuisines")
  product    Product[]   @relation("StoreToProduct")
  order      Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updateAt   DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updateAt   DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  product     Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  product   Product[] @relation("SizeToProduct")
  name      String
  value     String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt

  @@index([storeId])
}

model Kitchens {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToKitchens", fields: [storeId], references: [id])
  product   Product[] @relation("KitchensToProduct")
  name      String
  value     String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt

  @@index([storeId])
}

model Cuisines {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToCuisines", fields: [storeId], references: [id])
  product   Product[] @relation("CuisinesToProduct")
  name      String
  value     String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id         String      @id @default(uuid())
  name       String
  price      Decimal
  isFeatured Boolean
  isArchived Boolean
  storeId    String
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  sizeId     String
  size       Size        @relation("SizeToProduct", fields: [sizeId], references: [id])
  kitchenId  String   
  kitchen    Kitchens    @relation("KitchensToProduct", fields: [kitchenId], references: [id])
  cuisinesId String
  cuisines   Cuisines    @relation("CuisinesToProduct", fields: [cuisinesId], references: [id])
  images     Image[]     @relation("ProductToImage")
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updateAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([kitchenId])
  @@index([cuisinesId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([productId])
}

model Order {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems  OrderItem[]
  isPaid      Boolean     @default(false)
  orderStatus String
  phone       String      @default("")
  adress      String      @default("")
  createdAt   DateTime    @default(now())
  updateAt    DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
